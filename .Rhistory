essentia.data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
#rowwise()|>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF))
view(allentown.data)
essentia.data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF))
essentia.data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
essentia.data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (1000 > max | 1000 < min)) |>
mutate(unusual = (1000 > UF | 1000 < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
essentia.data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
#function that determines whether Allentown is out of range, unusual, or within the range for each band
check_range = function(essentia.data, feature){
essentia.data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature)) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
for(feature in colnames(esentia.data)){
install.packages("tidyverse")
library(tidyverse)
essentia.data = read.csv("data/essentia.data.csv"). #data for all the tracks other than allentown
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature)) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(esentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
(check_range(essentia.data, feature))
}
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
view(essentia.data)
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
view(essentia.data)
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
view(essentia.data)
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
check_range = function(data, feature){
print(feature)
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
check_range = function(data, feature){
print(feature)
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
check_range = function(data, feature){
view(data)
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
check_range = function(data, feature){
view(data)
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
check_range(essentia.data, feature)
}
}
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
call = check_range(essentia.data, feature)
}
}
view(essentia.data)
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
call = check_range(essentia.data, feature)
}
}
view(essentia.data)
for(feature in colnames(essentia.data)){
if(is.numeric(feature)){
call = check_range(essentia.data, feature)
call
}
}
names = colnames(essentia.data)
names
names = colnames(essentia.data)
names
for(feature in names){
if(is.numeric(feature)){
print("hi")
check_range(essentia.data, feature)
}
}
?is.numeric
names = colnames(essentia.data)
names
for(feature in names){
if(feature %in% select_if(essentia.data, is.numeric)){
print("hi")
check_range(essentia.data, feature)
}
}
names = colnames(essentia.data)
names
for(feature in names){
if(feature %in% select_if(essentia.data, is.numeric)){
print("hi")
check_range(essentia.data, feature)
}
}
class(essentia.data$overall_loudness)
names = colnames(essentia.data)
names
for(feature in names){
if(class(feature) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
names = colnames(essentia.data)
names
for(feature in names){
if(class(get(feature)) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
if(class(feature) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
if(class(feature) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
print(class(feature))
if(class(feature) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
print(class(feature))
if(class(essentia.data$feature) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
names = colnames(essentia.data)
for(feature in names){
print(class(feature))
if(class(essentia.data$get(feature)) == "numeric"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
print(class(feature))
if(is.numeric(essentia.data$get(feature))){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
print(class(essentia.data$feature))
if(is.numeric(essentia.data$get(feature))){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
print(class(essentia.data$get(feature))
if(is.numeric(essentia.data$get(feature))){
for(feature in names){
print(class(essentia.data$get(feature)))
if(is.numeric(essentia.data$get(feature))){
print("hi")
check_range(essentia.data, feature)
}
}
names = names(essentia.data)
for(feature in names){
print(class(essentia.data$get(feature)))
if(is.numeric(essentia.data$get(feature))){
print("hi")
check_range(essentia.data, feature)
}
}
names = colnames(essentia.data)
for(feature in names){
print(feature)
if(is.numeric(essentia.data$get(feature))){
print("hi")
check_range(essentia.data, feature)
}
}
class(essentia.data$feature)
class(essentia.data$get(feature))
class(essentia.data$overall_loudness)
for(feature in names){
if(class(essentia.data$feature) == character){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
if(class(essentia.data$feature) == "character"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
if(class(essentia.data$feature) == "character"){
print("hi")
check_range(essentia.data, feature)
}
}
for(feature in names){
print(feature)
if(class(essentia.data$feature) == "character"){
print("hi")
check_range(essentia.data, feature)
}
}
select_if(essentia.data, is.numeric())
select_if(essentia.data, is.numeric)
class(select_if(essentia.data, is.numeric))
names = colnames(essentia.data)
numeric.cols = select_if(essentia.data, is.numeric)
for(feature in colnames(numeric.cols)){
check_range(essentia.data, feature)
print("hi")
}
rlang::last_trace()
for(feature in colnames(numeric.cols)){
print(feature)
check_range(essentia.data, feature)
print("hi")
}
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$feature > max | allentown.data$feature < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
for(feature in colnames(numeric.cols)){
print(feature)
check_range(essentia.data, feature)
print("hi")
}
rlang::last_trace()
?get()
library(tidyverse)
essentia.data = read.csv("data/essentia.data.csv"). #data for all the tracks other than allentown
library(tidyverse)
essentia.data = read.csv("data/essentia.data.csv") #data for all the tracks other than allentown
#view(essentia.data)
allentown.data = read.csv("data/essentia.data.allentown.csv")  #data for allentown
#view(allentown.data)
#function that determines whether Allentown is out of range, unusual, or within the range for each band
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(get(feature)), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
names = colnames(essentia.data)
numeric.cols = select_if(essentia.data, is.numeric)
for(feature in colnames(numeric.cols)){
print(feature)
check_range(essentia.data, feature)
print("hi")
}
rlang::last_trace()
check_range(essentia.data, overall_loudness)
check_range = function(data, feature){
data |>
group_by(artist) |>
summarize(min = min(feature), LF = median(get(feature)) - 2*IQR(get(feature)), UF = median(get(feature)) + 2*IQR(get(feature)), max = max(get(feature))) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
check_range(essentia.data, overall_loudness)
rlang::last_trace()
check_range(essentia.data, overall_loudness)
check_range = function(data){
data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$get(feature) > max | allentown.data$get(feature) < min)) |>
mutate(unusual = (allentown.data$get(feature) > UF | allentown.data$get(feature) < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
check_range(essentia.data)
check_range = function(data){
data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
check_range(essentia.data)
check_range(essentia.data)
view(essentia.data)
check_range = function(data){
data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
view(essentia.data)
}
check_range(essentia.data)
check_range(essentia.data)
check_range = function(data){
data |>
group_by(artist) |>
summarize(min = min(overall_loudness), LF = median(overall_loudness) - 2*IQR(overall_loudness), UF = median(overall_loudness) + 2*IQR(overall_loudness), max = max(overall_loudness)) |>
mutate(out.of.range = (allentown.data$overall_loudness > max | allentown.data$overall_loudness < min)) |>
mutate(unusual = (allentown.data$overall_loudness > UF | allentown.data$overall_loudness < LF)) |>
mutate(description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range"))
}
check_range(essentia.data)
