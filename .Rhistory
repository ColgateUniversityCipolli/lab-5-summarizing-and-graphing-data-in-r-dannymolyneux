unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range")  #within range if not unusual or out of range
)
}
#step 2 (apply the function to all of the data)
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- c()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[feature] <- check_range(feature)  #adds the info for that feature to the results list
}
View(range_results)
View(range_results)
check_range = function(feature){
essentia.stats = essentia.data |> #defining stats for each feature, grouped by artist
group_by(artist) |>
summarize(min = min(get(feature), na.rm = TRUE), LF = median(get(feature), na.rm = TRUE) - 2*IQR(get(feature), na.rm = TRUE),
UF = median(get(feature), na.rm = TRUE) + 2*IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE))
essentia.stats |>
mutate(
out.of.range = (allentown.data[[feature]] > max | allentown.data[[feature]] < min),  #considered out of range
unusual = (allentown.data[[feature]] > UF | allentown.data[[feature]] < LF),  #considered unusual
description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range")  #within range if not unusual or out of range
)
}
#step 2 (apply the function to all of the data)
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- list()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[feature] <- check_range(feature)  #adds the info for that feature to the results list
}
check_range = function(feature){
essentia.stats = essentia.data |> #defining stats for each feature, grouped by artist
group_by(artist) |>
summarize(min = min(get(feature), na.rm = TRUE), LF = median(get(feature), na.rm = TRUE) - 2*IQR(get(feature), na.rm = TRUE),
UF = median(get(feature), na.rm = TRUE) + 2*IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE))
essentia.stats |>
mutate(
out.of.range = (allentown.data[[feature]] > max | allentown.data[[feature]] < min),  #considered out of range
unusual = (allentown.data[[feature]] > UF | allentown.data[[feature]] < LF),  #considered unusual
description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range")  #within range if not unusual or out of range
)
}
#step 2 (apply the function to all of the data)
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- list()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[feature] <- check_range(feature)  #adds the info for that feature to the results list
}
warnings()
View(range_results)
View(range_results)
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[[feature]] <- check_range(feature)  #adds the info for that feature to the results list
}
View(range_results)
View(range_results)
library(xtable)
library(xtable)
?xtable
range_results[["overall_loudness"]]
view(range_results[["overall_loudness"]])
view(range_results)
?ends_with
descriptions = range_results |>
select(ends_with("description"))
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- data.frame()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[[feature]] <- check_range(feature)  #adds the info for that feature to the results list
}
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- data.frame()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results$get(feature) <- check_range(feature)  #adds the info for that feature to the results list
}
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- list()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[[feature]] <- check_range(feature)  #adds the info for that feature to the results list
}
view(range_results[["overall_loudness"]])
library(xtable)
view(range_results)
range_results[1]
view(range_results[1])
view(range_results[[1])
view(range_results[[1]])
view(range_results[1][8])
view(range_results[[1]][8])
view(range_results[[1]][8][1])
view(range_results[[1]][8][2])
view(range_results[[1]][8][[2]])
view(range_results[[1]][[8]][1])
view(range_results[[1]][[8]][2])
view(range_results[[1]][[8]])
view(range_results[[1]][8])
view(range_results[[1]][8])
view(range_results[[1]])
view(range_results[[1]][8])
view(range_results[[1]][8][2])
view(range_results[[1]][[8]][2])
view(range_results[[1]][[8]][3])
for (feature_name in names(range_results)) {
# Extract the current dataframe for the feature
current_df <- range_results[[feature_name]]
}
view(current_df)
names(range_results)
view(current_df$description)
?isin()
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[[feature_name]] == current_feature
}
}
out_of_range = list()  #list of features that are out of range for at least one artist
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[[feature_name]] == current_feature
}
}
view(current_feature$description)
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[[feature_name]] == current_feature
}
}
out_of_range
out_of_range = c()  #list of features that are out of range for at least one artist
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[feature_name] == feature_name
}
}
out_of_range
print(out_of_range)
out_of_range = c()  #list of features that are out of range for at least one artist
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[feature_name] == feature_name
}
}
print(out_of_range)
out_of_range = c()  #list of features that are out of range for at least one artist
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
print("hi")
out_of_range[feature_name] == feature_name
}
}
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
if(any(current_feature$description == "Out of Range")){
print("hi")
out_of_range[feature_name] == feature_name
}
}
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
#if(any(current_feature$description == "Out of Range")){
#print("hi")
#out_of_range[feature_name] == feature_name
}
}
out_of_range = c()  #list of features that are out of range for at least one artist
for (feature_name in colnames(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
#if(any(current_feature$description == "Out of Range")){
#print("hi")
#out_of_range[feature_name] == feature_name
#}
}
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
#if(any(current_feature$description == "Out of Range")){
#print("hi")
#out_of_range[feature_name] == feature_name
#}
}
names(range_results)
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
#if(any(current_feature$description == "Out of Range")){
#print("hi")
#out_of_range[feature_name] == feature_name
#}
}
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
view(current_feature$description)
if(any(current_feature$description == "Out of Range")){
print("hi")
out_of_range[feature_name] == feature_name
}
}
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[feature_name] == feature_name
}
}
print(out_of_range)
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[feature_name] == feature_name
}
}
view(out_of_range)
out_of_range = c()  #list of features that are out of range for at least one artist
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[feature_name] == feature_name
}
}
out_of_range
out_of_range = list()  #list of features that are out of range for at least one artist
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[[feature_name]] == feature_name
}
}
out_of_range
out_of_range = list()  #list of features that are out of range for at least one artist
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[[feature_name]] == current_feature
}
}
out_of_range
for (feature_name in names(range_results)) {
#track the current data frame for each feature
current_feature <- range_results[[feature_name]]
if(any(current_feature$description == "Out of Range")){
out_of_range[[feature_name]] == current_feature
}
}
view(out_of_range)
view(range_results)
install.packages("tidyverse")
library(tidyverse)
essentia.data = read.csv("data/essentia.data.csv") #data for all the tracks other than allentown
#view(essentia.data)
allentown.data = read.csv("data/essentia.data.allentown.csv")  #data for allentown
#function that determines whether a given feature in Allentown is out of range, unusual, or within the range for each band
check_range = function(feature){
essentia.stats = essentia.data |> #defining stats for each feature, grouped by artist
group_by(artist) |>
summarize(min = min(get(feature), na.rm = TRUE), LF = median(get(feature), na.rm = TRUE) - 2*IQR(get(feature), na.rm = TRUE),
UF = median(get(feature), na.rm = TRUE) + 2*IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE))
essentia.stats |>
mutate(
out.of.range = (allentown.data[[feature]] > max | allentown.data[[feature]] < min),  #considered out of range
unusual = (allentown.data[[feature]] > UF | allentown.data[[feature]] < LF),  #considered unusual
description = case_when(out.of.range == TRUE ~ "Out of Range",
unusual == TRUE ~ "Outlying",
TRUE ~ "Within Range")  #within range if not unusual or out of range
)
}
#step 2 (apply the function to all of the data)
numeric.cols = select_if(essentia.data, is.numeric)  #list of only numeric columns in essentia.data
range_results <- list()  #empty list that will store the results for each feature
for(feature in colnames(numeric.cols)) {  #goes through every numeric column
range_results[[feature]] <- check_range(feature)  #adds the info for that feature to the results list
}
library(xtable)
view(range_results)
view(out_of_range)
class(range_results)
FrontBottoms <- "The Front Bottoms"
# Initialize a list to store results
artist_rows <- list()
# Loop through each feature in range_results
for (feature_name in names(range_results)) {
# Get the current dataframe for the feature
feature_df <- range_results[[feature_name]]
# Filter the rows for the specific artist
artist_row <- feature_df %>%
filter(artist == desired_artist)
# If the artist_row is not empty, add it to the result list
if (nrow(artist_row) > 0) {
artist_rows[[feature_name]] <- artist_row
}
}
# Filter the rows for the specific artist
artist_row <- feature_df %>%
filter(artist == FrontBottoms)
# If the artist_row is not empty, add it to the result list
if (nrow(artist_row) > 0) {
artist_rows[[feature_name]] <- artist_row
}
# Loop through each feature in range_results
for (feature_name in names(range_results)) {
# Get the current dataframe for the feature
feature_df <- range_results[[feature_name]]
# Filter the rows for the specific artist
artist_row <- feature_df %>%
filter(artist == FrontBottoms)
# If the artist_row is not empty, add it to the result list
if (nrow(artist_row) > 0) {
artist_rows[[feature_name]] <- artist_row
}
}
# Print the result
print(artist_rows)
# Print the result
view(artist_rows)
# Initialize list to store results for each artist
FrontBottoms_row <- list()
ManchesterOrchestra_row <- list()
AllGetOut_row <- list()
#Loop through each feature in range_results
for (feature_name in names(range_results)) {
# Get the current dataframe for the feature
feature_df <- range_results[[feature_name]]
#Filter the rows for The Front Bottoms for that feature
FrontBottoms_feature <- feature_df %>%
filter(artist == FrontBottoms)
#Filter the rows for The Front Bottoms for that feature
ManchesterOrchestra_feature <- feature_df %>%
filter(artist == ManchesterOrchestra)
#Filter the rows for All Get Out for that feature
AllGetOut_feature <- feature_df %>%
filter(artist == AllGetOut)
FrontBottoms_row[[feature_name]] <- FrontBottoms_feature
ManchesterOrchestra_row[[feature_name]] <- ManchesterOrchestra_feature
AllGetOut_row[[feature_name]] <- AllGetOut_feature
}
# Store variables for each artist
FrontBottoms <- "The Front Bottoms"
ManchesterOrchestra <- "Manchester Orchestra"
AllGetOut <- "All Get Out"
# Initialize list to store results for each artist
FrontBottoms_row <- list()
ManchesterOrchestra_row <- list()
AllGetOut_row <- list()
#Loop through each feature in range_results
for (feature_name in names(range_results)) {
# Get the current dataframe for the feature
feature_df <- range_results[[feature_name]]
#Filter the rows for The Front Bottoms for that feature
FrontBottoms_feature <- feature_df %>%
filter(artist == FrontBottoms)
#Filter the rows for The Front Bottoms for that feature
ManchesterOrchestra_feature <- feature_df %>%
filter(artist == ManchesterOrchestra)
#Filter the rows for All Get Out for that feature
AllGetOut_feature <- feature_df %>%
filter(artist == AllGetOut)
FrontBottoms_row[[feature_name]] <- FrontBottoms_feature
ManchesterOrchestra_row[[feature_name]] <- ManchesterOrchestra_feature
AllGetOut_row[[feature_name]] <- AllGetOut_feature
}
# Print the result
view(FrontBottoms_row)
# Print the result
class(FrontBottoms_row)
FrontBottoms_row[1]
view(FrontBottoms_row[1])
view(FrontBottoms_row[[1]])
view(FrontBottoms_row[[8]])
view(FrontBottoms_row[[1]][[8]])
sum = 0
i = 0
for(description in row[[1]][[8]]){
sum = sum + (row[[i]][[8]] == "Out of Range")
i = i + 1
}
# Print the result
view(FrontBottoms_row[[10]])
# Print the result
view(FrontBottoms_row[10])
# Print the result
view(FrontBottoms_row[100])
# Print the result
view(FrontBottoms_row[180])
# Print the result
view(FrontBottoms_row[190])
# Print the result
view(FrontBottoms_row[199])
# Print the result
view(FrontBottoms_row[196])
# Print the result
view(FrontBottoms_row[197])
# Print the result
view(FrontBottoms_row[198])
length(FrontBottoms_row)
sum = 0
i = 1
while(i<=length(FrontBottoms_row)){
sum = sum + (FrontBottoms_row[[i]][[8]] == "Out of Range")
i = i + 1
}
print(sum)
MO_sum = 0
i = 1
while(i<=length(ManchesterOrchestra_row)){
MO_sum = MO_sum + (ManchesterOrchestra_row[[i]][[8]] == "Out of Range")
i = i + 1
}
print(MO_sum)
AGO_sum = 0
i = 1
while(i<=length(AllGetOut_row)){
AGO_sum = AGO_sum + (AllGetOut_row[[i]][[8]] == "Out of Range")
i = i + 1
}
print(AGO_sum)
FB_sum_Unusual = 0
FB_sum_Out = 0
FB_sum_Unusual = 0
FB_sum_Within = 0
i = 1
while(i<=length(FrontBottoms_row)){
FB_sum_Out = FB_sum_Out + (FrontBottoms_row[[i]][[8]] == "Out of Range")
FB_sum_Unusual = FB_sum_Unusual + (FrontBottoms_row[[i]][[8]] == "Outlying")
FB_sum_Within = FB_sum_Within + (FrontBottoms_row[[i]][[8]] == "Within Range")
i = i + 1
}
print(FB_sum_Out)
print(FB_sum_Unusual)
print(FB_sum_Within)
while(i<=length(FrontBottoms_row)){
FB_sum_Out = FB_sum_Out + (FrontBottoms_row[[i]][[8]] == "Out of Range")
FB_sum_Unusual = FB_sum_Unusual + (FrontBottoms_row[[i]][[8]] == "Outlying")
FB_sum_Within = 197 - (FB_sum_Out + FB_sum_Unusual)
i = i + 1
}
print(FB_sum_Out)
print(FB_sum_Unusual)
print(FB_sum_Within)
FB_sum_Out = 0
FB_sum_Unusual = 0
FB_sum_Within = 0
i = 1
while(i<=length(FrontBottoms_row)){
FB_sum_Out = FB_sum_Out + (FrontBottoms_row[[i]][[8]] == "Out of Range")
FB_sum_Unusual = FB_sum_Unusual + (FrontBottoms_row[[i]][[8]] == "Outlying")
FB_sum_Within = length(FrontBottoms_row) - (FB_sum_Out + FB_sum_Unusual)
i = i + 1
}
print(FB_sum_Out)
print(FB_sum_Unusual)
print(FB_sum_Within)
MO_sum_Out = 0
MO_sum_Unusual = 0
MO_sum_Within = 0
i = 1
while(i<=length(ManchesterOrchestra_row)){
MO_sum_Out = MO_sum_Out + (ManchesterOrchestra_row[[i]][[8]] == "Out of Range")
MO_sum_Unusual = MO_sum_Unusual + (ManchesterOrchestra_row[[i]][[8]] == "Outlying")
MO_sum_Within = length(ManchesterOrchestra_row) - (MO_sum_Unusual + MO_sum_Out)
i = i + 1
}
print(MO_sum_Out)
print(MO_sum_Unusual)
print(MO_sum_Within)
AGO_sum_Out = 0
AGO_sum_Unusual = 0
AGO_sum_Within = 0
i = 1
while(i<=length(AllGetOut_row)){
AGO_sum_Out = AGO_sum_Out + (AllGetOut_row[[i]][[8]] == "Out of Range")
AGO_sum_Unusual = AGO_sum_Unusual + (AllGetOut_row[[i]][[8]] == "Outlying")
AGO_sum_Within = length(AllGetOut_row) - (AGO_sum_Unusual + AGO_sum_Out)
i = i + 1
}
print(AGO_sum_Out)
print(AGO_sum_Unusual)
print(AGO_sum_Within)
